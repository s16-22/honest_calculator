type: edu
files:
- name: honest_calc.py
  visible: true
  text: |
    import sys


    def def_operation(a, b, c):
        # check(v1, v2, v3)
        if c == "+":
            return float(a) + float(b)
        if c == "-":
            return float(a) - float(b)
        if c == "*":
            return float(a) * float(b)
        if c == "/":
            try:
                return float(a) / float(b)
            except ZeroDivisionError:
                print("Yeah... division by zero. Smart move...")


    # def check(v1, v2, v3):
    #     msg = ""
    #     msg_6 = " ... lazy"
    #     msg_7 = " ... very lazy"
    #     msg_8 = " ... very, very lazy"
    #     msg_9 = "You are"
    #     if is_one_digit(v1) and is_one_digit(v2):
    #         msg += msg_6
    #     if (v1 == 1 or v2 == 1) and v3 == "*":
    #         msg = msg + msg_7
    #     if (v1 == 0 or v2 == 0) and (v3 == "*" or v3 == "+" or v3 == "-"):
    #         msg = msg + msg_8
    #     if msg != "":
    #         msg = msg_9 + msg
    #     print(msg)
    #     return msg
    #
    #
    # def is_one_digit(v):
    #     if v == int(v):
    #         if -10 < v < 10:
    #             output = True
    #             return output
    #     else:
    #         output = False
    #         return output


    # print()
    # print(is_one_digit(x))
    # print()
    # print(is_one_digit(y))


    # check(x, y, oper)

    memory = 0
    while True:
        print("Enter an equation")
        x, oper, y = input().split()
        M = "M"
        if x == M:
            x = memory
        elif y == M:
            y = memory
        try:
            number = float(x) + float(y)
        except ValueError:
            print("Do you even know what numbers are? Stay focused!")
        result = def_operation(x, y, oper)
        if result:
            print(result)
        else:
            continue

        print("Do you want to store the result? (y / n):")
        answer = input()
        if answer == "y":
            memory = result
        if answer == "n":
            pass
        print("Do you want to continue calculations? (y / n):")
        answer = input()
        if answer == "y":
            continue
        if answer == "n":
            sys.exit()
  learner_created: false
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    from hstest import StageTest, CheckResult, WrongAnswer, dynamic_test, TestedProgram

    msg = ["Enter an equation",
           "Do you even know what numbers are? Stay focused!",
           "Yes ... an interesting math operation. You've slept through all classes, haven't you?",
           "Yeah... division by zero. Smart move...",
           "Do you want to store the result? (y / n):",
           "Do you want to continue calculations? (y / n):",
           " ... lazy",
           " ... very lazy",
           " ... very, very lazy",
           "You are"]


    def add_enter(txt):
        return "\n".join([txt, msg[0]])


    def add_memory(txt):
        return "\n".join([txt, msg[4]])


    data = [(("4 * 5.5", add_memory("22.0")), ("y", msg[5]), ("n", "")),
            (("11 * 11.1", add_memory("122.1")), ("y", msg[5]), ("n", "")),
            (("1 * 5", "\n".join([msg[9] + msg[6] + msg[7], add_memory("5.0")])), ("y", msg[5]), ("y", msg[0]),
             ("0 + M", "\n".join([msg[9] + msg[6] + msg[8], add_memory("5.0")])), ("y", msg[5]), ("n", "")),
            (("2 / M", "\n".join([msg[9] + msg[6], add_enter(msg[3])])), ("1 * M", "\n".join([msg[9] + "".join(msg[6:9]), add_memory("0.0")])), ("n", msg[5]), ("y", msg[0]),
             ("899 * 0", "\n".join([msg[9] + msg[8], add_memory("0.0")])), ("n", msg[5]), ("n", "")),
           ]  # (input data, msg sentence])


    class HonestCalc(StageTest):
        @dynamic_test(data=data)
        def test(self, *items):
            pr = TestedProgram()
            output = pr.start()
            if msg[0] not in output:
                return CheckResult.wrong(f"Expected: ({msg[0]});\nFound:    ({output.strip()})")
            for item in items:
                output = pr.execute(item[0])
                if item[1] != output.strip():
                    return CheckResult.wrong(f"Expected:\n{item[1]}\nFound:\n{output.strip()}")
            if not pr.is_finished():
                return CheckResult.wrong("Your program unnecessarily waiting for input.")
            return CheckResult.correct()


    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import HonestCalc

    if __name__ == '__main__':
        HonestCalc().run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/208/stages/1042/implement#comment
status: Solved
record: 3
